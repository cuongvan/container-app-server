#! /usr/bin/env python3.6

from sqlalchemy import create_engine
import shutil, pathlib, subprocess
db = create_engine("postgres://ckan_default:ckan_default@localhost:5432/ckan_default")

def main():
    delete_data_dir()
    drop()
    create()
    build_base_docker_images()

def delete_data_dir():
    print('Delete data directories')
    dir = pathlib.Path(__file__).parent.absolute() / '../../ckanapp'
    if dir.is_dir():
        shutil.rmtree(str(dir))

def drop():
    print('Drop tables...')
    db.execute('DROP TABLE IF EXISTS call_input, call_output, app_call, app_param, app_info')

def create():
    print('Create tables...')
    db.execute('''
        CREATE TABLE app_info (
            app_id TEXT PRIMARY KEY,
            app_name TEXT NOT NULL,
            avatar_path TEXT,
            type TEXT,
            slug_name TEXT,
            code_path TEXT,
            image TEXT,
            image_id TEXT,
            owner TEXT,
            organization TEXT,
            description TEXT,
            language TEXT,
            created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
            app_status TEXT,
            sys_status TEXT
        );
    ''')

    db.execute('''
        CREATE TABLE app_param (
            app_id TEXT REFERENCES app_info(app_id) ON DELETE CASCADE,
            name TEXT NOT NULL,
            type TEXT NOT NULL,
            label TEXT NOT NULL,
            description TEXT,
            PRIMARY KEY(app_id, name)
        );
    ''')

    db.execute('''
        CREATE TABLE app_call (
            call_id TEXT PRIMARY KEY,
            app_id TEXT NOT NULL,
            user_id TEXT,
            elapsed_seconds BIGINT,
            call_status TEXT,
            logs TEXT,
            created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
        );
    ''')

    db.execute('''
        CREATE TABLE call_input (
            call_id TEXT REFERENCES app_call(call_id) ON DELETE CASCADE,
            name TEXT NOT NULL,
            type TEXT NOT NULL,
            value TEXT,
            PRIMARY KEY(call_id, name)
        );
    ''')

    db.execute('''
        CREATE TABLE call_output (
            call_id TEXT REFERENCES app_call(call_id) ON DELETE CASCADE,
            name TEXT NOT NULL,
            type TEXT NOT NULL,
            value TEXT,
            PRIMARY KEY(call_id, name)
        );
    ''')

def build_base_docker_images():
    print('Build base docker images')
    subprocess.run('docker build . -t ckanapp-python:3.8-v1', shell=True, cwd=pathlib.Path(__file__).parent.absolute() / 'python_image')

main()
